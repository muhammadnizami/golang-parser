package main
          

import   "lib/math"         
import m "lib/math"         
import . "lib/math"

//error here
import _ "lib/math"



func protect(g func()) {
	defer func() {
		log.Println("done")  // Println executes normally even if there is a panic
		if x := recover(); x != nil {
			log.Printf("run time panic: %v", x)
		}
	}()
	log.Println("start")
	g()
}


func hoil(){
    panic(42)
    panic("unreachable")
    panic(Error("cannot parse"))

}


//error here
func recover() interface{}

//error here
func panic(interface{})

func conversion() {

    var a = complex(2, -2)             // complex128
    const b = complex(1.0, -1.4)       // untyped complex constant 1 - 1.4i
    x := float32(math.Cos(math.Pi/2))  // float32
    var c64 = complex(5, -x)           // complex64
    var s uint = complex(1, 0)         // untyped complex constant 1 + 0i can be converted to uint
    _ = complex(1, 2<<s)               // illegal: 2 assumes floating-point type, cannot shift
    var rl = real(c64)                 // float32
    var im = imag(a)                   // float64
    const c = imag(b)                  // untyped constant -1.4
    _ = imag(3 << s)                   // illegal: 3 assumes complex type, cannot shift


    var a = [...]int{0, 1, 2, 3, 4, 5, 6, 7}
    var s = make([]int, 6)
    var b = make([]byte, 5)
    n1 := copy(s, a[0:])            // n1 == 6, s == []int{0, 1, 2, 3, 4, 5}
    n2 := copy(s, s[2:])            // n2 == 4, s == []int{2, 3, 4, 5, 4, 5}
    n3 := copy(b, "Hello, World!")  // n3 == 5, b == []byte("Hello")


    s0 := []int{0, 0}
    s1 := append(s0, 2)                // append a single element     s1 == []int{0, 0, 2}
    s2 := append(s1, 3, 5, 7)          // append multiple elements    s2 == []int{0, 0, 2, 3, 5, 7}
    s3 := append(s2, s0)            // append a slice              s3 == []int{0, 0, 2, 3, 5, 7, 0, 0}
    s4 := append(s3[3:6], s3[2:])   // append overlapping slice    s4 == []int{3, 5, 7, 2, 3, 5, 7, 0, 0}

    var t []interface{}
    t = append(t, 42, 3.1415, "foo")   //                             t == []interface{}{42, 3.1415, "foo"}

    var b []byte
    b = append(b, "bar")            // append string contents      b == []byte{'b', 'a', 'r' }


    s := make([]int, 10, 100)       // slice with len(s) == 10, cap(s) == 100
    s := make([]int, 1e3)           // slice with len(s) == cap(s) == 1000
    s := make([]int, 1<<63)         // illegal: len(s) is not representable by a value of type int
    s := make([]int, 10, 0)         // illegal: len(s) > cap(s)
    c := make(chan int, 10)         // channel with a buffer size of 10
    m := make(map[string]int, 100)  // map with initial space for approximately 100 elements

    type S struct {
		a int
		b float64
	}
	new(S)

	const (
		c1 = imag(2i)                   // imag(2i) = 2.0 is a constant
		//error here
        c2 = len([10]float64{2})        // [10]float64{2} contains no function calls
		//error here
        c3 = len([10]float64{c1})       // [10]float64{c1} contains no function calls
		//error here
        c4 = len([10]float64{imag(2i)}) // imag(2i) is a constant and no function call is issued
		//error here
        c5 = len([10]float64{imag(z)})  // invalid: imag(z) is a (non-constant) function call
	)
	var z complex128

}

func conversion() {

	lock(l)
	defer unlock(l) // unlocking happens before surrounding function returns

	// prints 3 2 1 0 before surrounding function returns
	for i := 0; i <= 3; i++ {
		defer fmt.Print(i)
	}

	// f returns 1

}

func f() (result int) {
	defer func() {
		result++
	}()
	return 0
}

func baru(){

    goto Error

    OuterLoop:
	for i = 0; i < n; i++ {
		for j = 0; j < m; j++ {
			switch a[i][j] {
			case nil:
				state = Error
				break OuterLoop
			case item:
				state = Found
				break OuterLoop
			}
		}
	}

    RowLoop:
	for y, row := range rows {
		for x, data := range row {
			if data == endOfRow {
				continue RowLoop
			}
			row[x] = data + bias(x, y)
		}
	}

}

func f(n int) (res int, err error) {
	if _, err := f(n-1); err != nil {
		return  // invalid return statement: err is shadowed
	}
	return
}


func complexF2() (re float64, im float64) {
	return complexF1()
}


func simpleF() int {
	return 2
}

func complexF1() (re float64, im float64) {
	return -7.0, -4.0
}


func noResult() {
    return
}

func howss(){





    ///////////////////////////////////////////////////////////////////////////////////////
    var a []int
    var c, c1, c2, c3, c4 chan int
    var i1, i2 int
    select {
    case i1 = <-c1:
        print("received ", i1, " from c1\n")
    case c2 <- i2:
        print("sent ", i2, " to c2\n")
    case i3, ok := (<-c3):  // same as: i3, ok := <-c3
        if ok {
            print("received ", i3, " from c3\n")
        } else {
            print("c3 is closed\n")
        }
    case a[f()] = <-c4:
        // same as:
        // case t := <-c4
        //	a[f()] = t
    default:
        print("no communication\n")
    }

    for {  // send random sequence of bits to c
        select {
        case c <- 0:  // note: no statement, no fallthrough, no folding of cases
        case c <- 1:
        }
    }

    select {}  // block forever



    go Server()
    go func(ch chan<- bool) { for { sleep(10); ch <- true }} (c)


    var testdata *struct {
        a *[7]int
    }
    for i, _ := range testdata.a {
        // testdata.a is never evaluated; len(testdata.a) is constant
        // i ranges from 0 to 6
        f(i)
    }

    var a [10]string
    for i, s := range a {
        // type of i is int
        // type of s is string
        // s == a[i]
        g(i, s)
    }

    var key string
    var val interface {}  // element type of m is assignable to val
    m := map[string]int{"mon":0, "tue":1, "wed":2, "thu":3, "fri":4, "sat":5, "sun":6}
    for key, val = range m {
        h(key, val)
    }
    // key == last map key encountered in iteration
    // val == map[key]

    var ch chan Work = producer()
    for w := range ch {
        doWork(w)
    }

    // error here
    // empty a channel
    for range ch {}



    for cond { S() }

    for      { S() }

    for i := 0; i < 10; i++ {
        f(i)
    }

    for a < b {
        a *= 2
    }

    v := x  // x is evaluated exactly once
    if v == nil {
        i := v                                 // type of i is type of x (interface{})
        printString("x is nil")
    } else if i, isInt := v.(int); isInt {
        printInt(i)                            // type of i is int
    } else if i, isFloat64 := v.(float64); isFloat64 {
        printFloat64(i)                        // type of i is float64
    } else if i, isFunc := v.(func(int) float64); isFunc {
        printFunction(i)                       // type of i is func(int) float64
    } else {
        _, isBool := v.(bool)
        _, isString := v.(string)
        if isBool || isString {
            i := v                         // type of i is type of x (interface{})
            printString("type is bool or string")
        } else {
            i := v                         // type of i is type of x (interface{})
            printString("don't know the type")
        }
    }


}
