package main;

type Person struct {
	Name    string
	Address *struct {
		Street string
		City   string
	}
}

var data *struct {
	Name    string `json:"name"`
	Address *struct {
		Street string `json:"street"`
		City   string `json:"city"`
	} `json:"address"`
}

var person = (*Person)(data)


func converting() {
	uint(iota)              // iota value of type uint
	float32(2.718281828)    // 2.718281828 of type float32
	complex128(1)           // 1.0 + 0.0i of type complex128
	float32(0.49999999)     // 0.5 of type float32
	float64(-1e-1000)       // 0.0 of type float64
	string('x')             // "x" of type string
	string(0x266c)          // "â™¬" of type string
	MyString("foo" + "bar") // "foobar" of type MyString
	string([]byte{'a'})     // not a constant: []byte{'a'} is not a constant
	(*int)(nil)             // not a constant: nil is not a constant, *int is not a boolean, numeric, or string type
	int(1.2)                // illegal: 1.2 cannot be represented as an int
	string(65.0)
}

func pointerP() {
	*Point(p)        // same as *(Point(p))
	(*Point)(p)      // p is converted to *Point
	<-chan int(c)    // same as <-(chan int(c))
	(<-chan int)(c)  // c is converted to <-chan int
	func()(x)        // function signature func() x
	(func())(x)      // x is converted to func()
	(func() int)(x)  // x is converted to func() int
	func() int(x)    // x is converted to func() int (unambiguous)
}

func chanelOp() {
	v1 := <-ch
	v2 = <-ch
	f(<-ch)
	<-strobe

	x, ok = <-ch
	x, ok := <-ch
	var x, ok = <-ch
	var x, ok T = <-ch

}


func addresOp() {
	&x
	&a[f(2)]
	//&Point{2, 3}
	//skip composite literal for now
	*p
	*pf(x)

	var x *int = nil
	*x  // causes a run-time panic
	&*x // causes a run-time panic
}

func boolOp(){
    const c = 3 < 4            // c is the untyped boolean constant true

    type MyBool bool
    var x, y int
    var (
        // The result of a comparison is an untyped boolean.
        // The usual assignment rules apply.
        b3        = x == y // b3 has type bool
        b4 bool   = x == y // b4 has type bool
        b5 MyBool = x == y // b5 has type MyBool
    )

}

func stringOp(){
    s := "hi" + string(c)
    s += " and good bye"
}

func floatOperator(){
    r  = x*y + z
    r  = z;   r += x*y
    t  = x*y; r = t + z
    *p = x*y; r = *p + z
    r  = x*y + float64(z)

    // FMA disallowed for computing r, because it would omit rounding of x*y:
    r  = float64(x*y) + z
    r  = z; r += float64(x*y)
    t  = float64(x*y); r = t + z
}

var s uint = 33
var i = 1 << s               // 1 has type int
var j int32 = 1 << s         // 1 has type int32; j == 0
var k = uint64(1 << s)       // 1 has type uint64; k == 1<<33
var m int = 1.0 << s         // 1.0 has type int; m == 0 if ints are 32bits in size
var n = 1.0<<s == j          // 1.0 has type int32; n == true
var o = 1<<s == 2<<s         // 1 and 2 have type int; o == true if ints are 32bits in size
var p = 1<<s == 1<<33        // illegal if ints are 32bits in size: 1 has type int, but 1<<33 overflows int
var u = 1.0 << s             // illegal: 1.0 has type float64, cannot shift
var u1 = 1.0<<s != 0         // illegal: 1.0 has type float64, cannot shift
var u2 = 1<<s != 1.0         // illegal: 1 has type float64, cannot shift
var v float32 = 1 << s       // illegal: 1 has type float32, cannot shift
var w int64 = 1.0 << 33      // 1.0<<33 is a constant shift expression
var x = a[1.0<<s]            // 1.0 has type int; x == a[0] if ints are 32bits in size

//error here
var a = make([]byte, 1.0<<s) // 1.0 has type int; len(a) == 0 if ints are 32bits in size

func cinta() {
	f := i.M
	f(7) // like i.M(7)

	s := a[1:4]

    //error here
	var i interface{ M(int) } = myVal
    //error here
	a := [5]int{1, 2, 3, 4, 5}
}














/////////////////////////////////////////////////////////



type T0 struct {
	x int
}


type T1 struct {
	y int
}

func (T1) M1()


type Q *T2

var t T2     // with t.T0 != nil
var p *T2    // with p != nil and (*p).T0 != nil
var q Q = p

type T struct {
	a int
}


var t T
var pt *T
func makeT() T



//error here
func (*T0) M0()

type T2 struct {
	z int
	T1
    //error here
	*T0
}

// error here
func (*T2) M2()

//error here
func (tv  T) Mv(a int) int         { return 0 }  // value receiver

//error here
func (tp *T) Mp(f float32) float32 { return 1 }  // pointer receiver